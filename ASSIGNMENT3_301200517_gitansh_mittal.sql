--NAME = GITANSH MITTAL
--STUDENTID = 301200517
--


--ANSWER 1 :
DROP FUNCTION NUM_PURCH_SF;

CREATE FUNCTION NUM_PURCH_SF (p_shopper_id NUMBER) 
RETURN NUMBER AS
    v_num_orders NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_num_orders
    FROM BB_BASKET
    WHERE IDSHOPPER = p_shopper_id
    AND ORDERPLACED = 1;
    RETURN v_num_orders;
END;

SELECT NUM_PURCH_SF(IDSHOPPER) AS total_orders
FROM BB_SHOPPER
WHERE IDSHOPPER = 23;


--ANSWER2:
DROP FUNCTION DAY_ORD_SF;
CREATE FUNCTION DAY_ORD_SF (p_order_date IN DATE)
RETURN VARCHAR2
IS
BEGIN
  RETURN TO_CHAR(p_order_date, 'DAY');
END;

SELECT IDBASKET, DAY_ORD_SF(DTCREATED) AS WEEKDAY
FROM BB_BASKET;

SELECT DAY_ORD_SF(DTCREATED) AS WEEKDAY, COUNT(*) AS TOTAL_BASKETS
FROM BB_BASKET
GROUP BY DAY_ORD_SF(DTCREATED);


--ANSWER3:
SET SERVEROUTPUT ON;
DROP FUNCTION ORD_SHIP_SF;

CREATE OR REPLACE FUNCTION ORD_SHIP_SF (basket_id IN NUMBER) RETURN VARCHAR2
IS
    dtordered DATE;
    dtshipped DATE;
    Vdays NUMBER;
    status NUMBER;
BEGIN
    SELECT DTORDERED INTO dtordered
    FROM BB_BASKET
    WHERE IDBASKET = basket_id;
    
    SELECT DTSTAGE, IDSTAGE INTO dtshipped, status
    FROM BB_BASKETSTATUS
    WHERE IDBASKET = basket_id
    AND IDSTAGE = 5;
    
    IF status = 5 THEN
        Vdays := dtshipped - dtordered;
        IF Vdays <= 1 THEN
            RETURN 'OK';
        ELSE
            RETURN 'CHECK';
        END IF;
    ELSE
        RETURN 'Not shipped';
    END IF;
END;




DECLARE
    v_basket_id NUMBER := 4;
    rst VARCHAR2(20);
BEGIN
    rst := ORD_SHIP_SF(v_basket_id);
    IF rst = 'OK' THEN
        DBMS_OUTPUT.PUT_LINE('Order shipped within a day');
    ELSIF rst = 'CHECK' THEN
        DBMS_OUTPUT.PUT_LINE('Order shipped after a day');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Order not shipped');
    END IF;
END;

--ANSWER4:
SET SERVEROUTPUT ON;

DROP TRIGGER BB_ORDCANCEL_TRG;
CREATE OR REPLACE TRIGGER BB_ORDCANCEL_TRG
AFTER INSERT ON BB_BASKETSTATUS
FOR EACH ROW
DECLARE
  BASKET_IDS SYS.ODCINUMBERLIST := SYS.ODCINUMBERLIST();
BEGIN
  IF :NEW.IDSTAGE = 4 THEN
    BASKET_IDS.EXTEND(1);
    BASKET_IDS(BASKET_IDS.COUNT) := :NEW.IDBASKET;
  END IF;

  FOR I IN 1..BASKET_IDS.COUNT LOOP
    UPDATE BB_BASKET
    SET ORDERPLACED = 0
    WHERE IDBASKET = BASKET_IDS(I);

    FOR ITEM IN (
      SELECT IDPRODUCT, QUANTITY
      FROM BB_BASKETITEM
      WHERE IDBASKET = BASKET_IDS(I)
    ) LOOP
      IF MOD(ITEM.QUANTITY, 0.5) = 0 THEN
        UPDATE BB_PRODUCT
        SET STOCK = STOCK + ITEM.QUANTITY
        WHERE IDPRODUCT = ITEM.IDPRODUCT;
      ELSE
        UPDATE BB_PRODUCT
        SET STOCK = STOCK + ITEM.QUANTITY + 0.5
        WHERE IDPRODUCT = ITEM.IDPRODUCT;
      END IF;
      DBMS_OUTPUT.PUT_LINE('STOCK LEVEL FOR PRODUCT ' || ITEM.IDPRODUCT || ' HAS BEEN UPDATED.');
    END LOOP;
  END LOOP;
END;


INSERT INTO BB_BASKETSTATUS (IDSTATUS, IDBASKET, IDSTAGE, DTSTAGE) VALUES (BB_STATUS_SEQ.NEXTVAL, 6, 4, SYSDATE);
ALTER TRIGGER BB_ORDCANCEL_TRG DISABLE;
ALTER TRIGGER BB_ORDCANCEL_TRG ENABLE;


--ANSWER5:
SET SERVEROUTPUT ON;
CREATE OR REPLACE PACKAGE DISC_PKG IS
    PV_DISC_NUM NUMBER := 0;
    PV_DISC_TXT VARCHAR2(1):= 'N';
END DISC_PKG;

CREATE OR REPLACE TRIGGER BB_DISCOUNT_TRG
AFTER UPDATE OF ORDERPLACED ON BB_BASKET
FOR EACH ROW
DECLARE
    l_disc_num NUMBER;
    l_disc_txt VARCHAR2(10);
BEGIN
    SELECT DISC_PKG.PV_DISC_NUM, DISC_PKG.PV_DISC_TXT
    INTO l_disc_num, l_disc_txt
    FROM DUAL;
    
    IF :NEW.ORDERPLACED = 1 AND l_disc_num = 5 THEN
        l_disc_txt := 'Y';
        DISC_PKG.PV_DISC_TXT := l_disc_txt;
    END IF;
END;


BEGIN
    DISC_PKG.PV_DISC_NUM:= 5;
    DISC_PKG.PV_DISC_TXT:='N';
END;
/

BEGIN
  DISC_PKG.PV_DISC_NUM := 5;
  DISC_PKG.PV_DISC_TXT := 'N';
  UPDATE BB_BASKET SET ORDERPLACED = 1 WHERE IDBASKET = 13;
  IF DISC_PKG.PV_DISC_TXT = 'Y' THEN
    DBMS_OUTPUT.PUT_LINE('Discount applied!');
  ELSE
    DBMS_OUTPUT.PUT_LINE('No discount applied.');
  END IF;
END;


ALTER TRIGGER BB_DISCOUNT_TRG DISABLE;

ALTER TRIGGER BB_DISCOUNT_TRG ENABLE;



